//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Modules/Common/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace QS.PlayerControl
{
    public partial class @PlayerControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""542292f1-90ce-4e36-a1b0-760306da5bde"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""0ea35298-24c4-4cde-874c-11fd592832ea"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1747234f-0aa9-49a3-a5e5-ad544095f962"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""46fc0b3e-c2fb-4d01-9e2c-6647166a2a05"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""7e82017c-5a19-4883-8294-0b65d8d4f5e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""11c1ac1e-e022-482f-acf5-5cfd689f1303"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""View"",
                    ""type"": ""Value"",
                    ""id"": ""93ddeac2-3a34-4e73-ad27-ebd919a5fbca"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Block"",
                    ""type"": ""Button"",
                    ""id"": ""8f2c0424-fec2-483e-9789-848416ff92ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimLock"",
                    ""type"": ""Button"",
                    ""id"": ""2f9e79dd-e55d-493c-9efc-c0434e865d61"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4bdbb4a7-9056-42b2-8974-6a23784647b0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bf4e086a-d0f4-4d0e-9434-1fa202d2cb58"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ee1f16c-5326-4be1-ab0d-06c28fc3822f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7d44950c-2a98-492f-9a0f-6f68063881dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""61d8af4c-03a9-42a6-9498-11daf6addca0"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2bc3b78b-8e0c-49a5-b80a-e1eed0afc1db"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9177891b-cb4f-4882-9207-1936cc7ec4f9"",
                    ""path"": ""<Keyboard>/#(E)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0021ad93-f955-4f38-b326-93b9b7f3f21f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f414412-9b71-440b-9d00-b05b4a9d828e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""86e6f348-75ee-4a9c-afb0-a81907cb1e6a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7493788e-6568-47b0-a3ca-737702cf0534"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""568f1ca9-3db3-4c8a-8003-f991b104b2a1"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a0570344-c4ba-4370-883a-a0bac62f1db8"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f09d99e1-e439-4497-bbc2-5234463e82d7"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""View"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""257ea391-554d-432b-87ed-155ddded1225"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Block"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3465b6ca-fadd-43e4-9256-e7ba7a7969c7"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimLock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainUI"",
            ""id"": ""7e28dc5f-ba3f-4ac9-b73d-3b01d4fe9fd8"",
            ""actions"": [
                {
                    ""name"": ""OpenInventory"",
                    ""type"": ""Button"",
                    ""id"": ""315b8fa6-0b9b-4fe4-9c5b-aadb6e4af8d1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6aa01659-0dc8-4dbf-90c7-b59d72385ee2"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialoguePanel"",
            ""id"": ""b38a4c10-3a09-492e-9fa6-e0e4601a9dce"",
            ""actions"": [
                {
                    ""name"": ""Show"",
                    ""type"": ""Button"",
                    ""id"": ""f5012960-e68f-49c7-b615-cf7257f0511d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Continue"",
                    ""type"": ""Button"",
                    ""id"": ""a69e7ba1-df1e-49ac-b19b-6c0c654767df"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e4982ac5-3762-43d6-bbf3-fa9dd5b77fe7"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Continue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1378cfc5-476b-4fff-bc02-ab5007d7289a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Show"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory"",
            ""id"": ""b70053da-2dcf-465a-ac87-9631789c469e"",
            ""actions"": [
                {
                    ""name"": ""CloseInventory"",
                    ""type"": ""Button"",
                    ""id"": ""cd33cc92-f8e3-49b8-8a9f-70226815b2bb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""77d7d491-2746-4a60-8eb7-f34702f653c7"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseInventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory_Weapon"",
            ""id"": ""c65d919d-9b7a-43ab-8337-72e72915cbbd"",
            ""actions"": [
                {
                    ""name"": ""EquipOrUnequip"",
                    ""type"": ""Button"",
                    ""id"": ""0ba2369c-f1b1-400d-b330-d377de09853c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""88c6aabf-2957-4b9f-bb82-46467ede6550"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EquipOrUnequip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory_Prop"",
            ""id"": ""8c0517a3-08ce-4a4b-900b-21dc21786dab"",
            ""actions"": [
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""78696b8f-b704-4072-a565-300acdfb42a8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8097c578-f588-4acb-a8e9-6d6bf9e5b639"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Inventory_Note"",
            ""id"": ""ef7d5eba-9038-41c2-b4c4-20c95fb7b60a"",
            ""actions"": [
                {
                    ""name"": ""view"",
                    ""type"": ""Button"",
                    ""id"": ""d222e0ff-d1f5-44ea-9b15-5448d9bbd681"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fbf9da3c-269f-4b20-8728-4418c835f957"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""view"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Tap = m_Player.FindAction("Tap", throwIfNotFound: true);
            m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
            m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_Dash = m_Player.FindAction("Dash", throwIfNotFound: true);
            m_Player_View = m_Player.FindAction("View", throwIfNotFound: true);
            m_Player_Block = m_Player.FindAction("Block", throwIfNotFound: true);
            m_Player_AimLock = m_Player.FindAction("AimLock", throwIfNotFound: true);
            // MainUI
            m_MainUI = asset.FindActionMap("MainUI", throwIfNotFound: true);
            m_MainUI_OpenInventory = m_MainUI.FindAction("OpenInventory", throwIfNotFound: true);
            // DialoguePanel
            m_DialoguePanel = asset.FindActionMap("DialoguePanel", throwIfNotFound: true);
            m_DialoguePanel_Show = m_DialoguePanel.FindAction("Show", throwIfNotFound: true);
            m_DialoguePanel_Continue = m_DialoguePanel.FindAction("Continue", throwIfNotFound: true);
            // Inventory
            m_Inventory = asset.FindActionMap("Inventory", throwIfNotFound: true);
            m_Inventory_CloseInventory = m_Inventory.FindAction("CloseInventory", throwIfNotFound: true);
            // Inventory_Weapon
            m_Inventory_Weapon = asset.FindActionMap("Inventory_Weapon", throwIfNotFound: true);
            m_Inventory_Weapon_EquipOrUnequip = m_Inventory_Weapon.FindAction("EquipOrUnequip", throwIfNotFound: true);
            // Inventory_Prop
            m_Inventory_Prop = asset.FindActionMap("Inventory_Prop", throwIfNotFound: true);
            m_Inventory_Prop_Use = m_Inventory_Prop.FindAction("Use", throwIfNotFound: true);
            // Inventory_Note
            m_Inventory_Note = asset.FindActionMap("Inventory_Note", throwIfNotFound: true);
            m_Inventory_Note_view = m_Inventory_Note.FindAction("view", throwIfNotFound: true);
        }

        ~@PlayerControls()
        {
            UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Player.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_MainUI.enabled, "This will cause a leak and performance issues, PlayerControls.MainUI.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_DialoguePanel.enabled, "This will cause a leak and performance issues, PlayerControls.DialoguePanel.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Inventory.enabled, "This will cause a leak and performance issues, PlayerControls.Inventory.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Inventory_Weapon.enabled, "This will cause a leak and performance issues, PlayerControls.Inventory_Weapon.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Inventory_Prop.enabled, "This will cause a leak and performance issues, PlayerControls.Inventory_Prop.Disable() has not been called.");
            UnityEngine.Debug.Assert(!m_Inventory_Note.enabled, "This will cause a leak and performance issues, PlayerControls.Inventory_Note.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Tap;
        private readonly InputAction m_Player_Move;
        private readonly InputAction m_Player_Interact;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_Dash;
        private readonly InputAction m_Player_View;
        private readonly InputAction m_Player_Block;
        private readonly InputAction m_Player_AimLock;
        public struct PlayerActions
        {
            private @PlayerControls m_Wrapper;
            public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Tap => m_Wrapper.m_Player_Tap;
            public InputAction @Move => m_Wrapper.m_Player_Move;
            public InputAction @Interact => m_Wrapper.m_Player_Interact;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @Dash => m_Wrapper.m_Player_Dash;
            public InputAction @View => m_Wrapper.m_Player_View;
            public InputAction @Block => m_Wrapper.m_Player_Block;
            public InputAction @AimLock => m_Wrapper.m_Player_AimLock;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Dash.started += instance.OnDash;
                @Dash.performed += instance.OnDash;
                @Dash.canceled += instance.OnDash;
                @View.started += instance.OnView;
                @View.performed += instance.OnView;
                @View.canceled += instance.OnView;
                @Block.started += instance.OnBlock;
                @Block.performed += instance.OnBlock;
                @Block.canceled += instance.OnBlock;
                @AimLock.started += instance.OnAimLock;
                @AimLock.performed += instance.OnAimLock;
                @AimLock.canceled += instance.OnAimLock;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Tap.started -= instance.OnTap;
                @Tap.performed -= instance.OnTap;
                @Tap.canceled -= instance.OnTap;
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Dash.started -= instance.OnDash;
                @Dash.performed -= instance.OnDash;
                @Dash.canceled -= instance.OnDash;
                @View.started -= instance.OnView;
                @View.performed -= instance.OnView;
                @View.canceled -= instance.OnView;
                @Block.started -= instance.OnBlock;
                @Block.performed -= instance.OnBlock;
                @Block.canceled -= instance.OnBlock;
                @AimLock.started -= instance.OnAimLock;
                @AimLock.performed -= instance.OnAimLock;
                @AimLock.canceled -= instance.OnAimLock;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // MainUI
        private readonly InputActionMap m_MainUI;
        private List<IMainUIActions> m_MainUIActionsCallbackInterfaces = new List<IMainUIActions>();
        private readonly InputAction m_MainUI_OpenInventory;
        public struct MainUIActions
        {
            private @PlayerControls m_Wrapper;
            public MainUIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @OpenInventory => m_Wrapper.m_MainUI_OpenInventory;
            public InputActionMap Get() { return m_Wrapper.m_MainUI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainUIActions set) { return set.Get(); }
            public void AddCallbacks(IMainUIActions instance)
            {
                if (instance == null || m_Wrapper.m_MainUIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MainUIActionsCallbackInterfaces.Add(instance);
                @OpenInventory.started += instance.OnOpenInventory;
                @OpenInventory.performed += instance.OnOpenInventory;
                @OpenInventory.canceled += instance.OnOpenInventory;
            }

            private void UnregisterCallbacks(IMainUIActions instance)
            {
                @OpenInventory.started -= instance.OnOpenInventory;
                @OpenInventory.performed -= instance.OnOpenInventory;
                @OpenInventory.canceled -= instance.OnOpenInventory;
            }

            public void RemoveCallbacks(IMainUIActions instance)
            {
                if (m_Wrapper.m_MainUIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMainUIActions instance)
            {
                foreach (var item in m_Wrapper.m_MainUIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MainUIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MainUIActions @MainUI => new MainUIActions(this);

        // DialoguePanel
        private readonly InputActionMap m_DialoguePanel;
        private List<IDialoguePanelActions> m_DialoguePanelActionsCallbackInterfaces = new List<IDialoguePanelActions>();
        private readonly InputAction m_DialoguePanel_Show;
        private readonly InputAction m_DialoguePanel_Continue;
        public struct DialoguePanelActions
        {
            private @PlayerControls m_Wrapper;
            public DialoguePanelActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Show => m_Wrapper.m_DialoguePanel_Show;
            public InputAction @Continue => m_Wrapper.m_DialoguePanel_Continue;
            public InputActionMap Get() { return m_Wrapper.m_DialoguePanel; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DialoguePanelActions set) { return set.Get(); }
            public void AddCallbacks(IDialoguePanelActions instance)
            {
                if (instance == null || m_Wrapper.m_DialoguePanelActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_DialoguePanelActionsCallbackInterfaces.Add(instance);
                @Show.started += instance.OnShow;
                @Show.performed += instance.OnShow;
                @Show.canceled += instance.OnShow;
                @Continue.started += instance.OnContinue;
                @Continue.performed += instance.OnContinue;
                @Continue.canceled += instance.OnContinue;
            }

            private void UnregisterCallbacks(IDialoguePanelActions instance)
            {
                @Show.started -= instance.OnShow;
                @Show.performed -= instance.OnShow;
                @Show.canceled -= instance.OnShow;
                @Continue.started -= instance.OnContinue;
                @Continue.performed -= instance.OnContinue;
                @Continue.canceled -= instance.OnContinue;
            }

            public void RemoveCallbacks(IDialoguePanelActions instance)
            {
                if (m_Wrapper.m_DialoguePanelActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IDialoguePanelActions instance)
            {
                foreach (var item in m_Wrapper.m_DialoguePanelActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_DialoguePanelActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public DialoguePanelActions @DialoguePanel => new DialoguePanelActions(this);

        // Inventory
        private readonly InputActionMap m_Inventory;
        private List<IInventoryActions> m_InventoryActionsCallbackInterfaces = new List<IInventoryActions>();
        private readonly InputAction m_Inventory_CloseInventory;
        public struct InventoryActions
        {
            private @PlayerControls m_Wrapper;
            public InventoryActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @CloseInventory => m_Wrapper.m_Inventory_CloseInventory;
            public InputActionMap Get() { return m_Wrapper.m_Inventory; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InventoryActions set) { return set.Get(); }
            public void AddCallbacks(IInventoryActions instance)
            {
                if (instance == null || m_Wrapper.m_InventoryActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Add(instance);
                @CloseInventory.started += instance.OnCloseInventory;
                @CloseInventory.performed += instance.OnCloseInventory;
                @CloseInventory.canceled += instance.OnCloseInventory;
            }

            private void UnregisterCallbacks(IInventoryActions instance)
            {
                @CloseInventory.started -= instance.OnCloseInventory;
                @CloseInventory.performed -= instance.OnCloseInventory;
                @CloseInventory.canceled -= instance.OnCloseInventory;
            }

            public void RemoveCallbacks(IInventoryActions instance)
            {
                if (m_Wrapper.m_InventoryActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventoryActions instance)
            {
                foreach (var item in m_Wrapper.m_InventoryActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_InventoryActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public InventoryActions @Inventory => new InventoryActions(this);

        // Inventory_Weapon
        private readonly InputActionMap m_Inventory_Weapon;
        private List<IInventory_WeaponActions> m_Inventory_WeaponActionsCallbackInterfaces = new List<IInventory_WeaponActions>();
        private readonly InputAction m_Inventory_Weapon_EquipOrUnequip;
        public struct Inventory_WeaponActions
        {
            private @PlayerControls m_Wrapper;
            public Inventory_WeaponActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @EquipOrUnequip => m_Wrapper.m_Inventory_Weapon_EquipOrUnequip;
            public InputActionMap Get() { return m_Wrapper.m_Inventory_Weapon; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Inventory_WeaponActions set) { return set.Get(); }
            public void AddCallbacks(IInventory_WeaponActions instance)
            {
                if (instance == null || m_Wrapper.m_Inventory_WeaponActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Inventory_WeaponActionsCallbackInterfaces.Add(instance);
                @EquipOrUnequip.started += instance.OnEquipOrUnequip;
                @EquipOrUnequip.performed += instance.OnEquipOrUnequip;
                @EquipOrUnequip.canceled += instance.OnEquipOrUnequip;
            }

            private void UnregisterCallbacks(IInventory_WeaponActions instance)
            {
                @EquipOrUnequip.started -= instance.OnEquipOrUnequip;
                @EquipOrUnequip.performed -= instance.OnEquipOrUnequip;
                @EquipOrUnequip.canceled -= instance.OnEquipOrUnequip;
            }

            public void RemoveCallbacks(IInventory_WeaponActions instance)
            {
                if (m_Wrapper.m_Inventory_WeaponActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventory_WeaponActions instance)
            {
                foreach (var item in m_Wrapper.m_Inventory_WeaponActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Inventory_WeaponActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Inventory_WeaponActions @Inventory_Weapon => new Inventory_WeaponActions(this);

        // Inventory_Prop
        private readonly InputActionMap m_Inventory_Prop;
        private List<IInventory_PropActions> m_Inventory_PropActionsCallbackInterfaces = new List<IInventory_PropActions>();
        private readonly InputAction m_Inventory_Prop_Use;
        public struct Inventory_PropActions
        {
            private @PlayerControls m_Wrapper;
            public Inventory_PropActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Use => m_Wrapper.m_Inventory_Prop_Use;
            public InputActionMap Get() { return m_Wrapper.m_Inventory_Prop; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Inventory_PropActions set) { return set.Get(); }
            public void AddCallbacks(IInventory_PropActions instance)
            {
                if (instance == null || m_Wrapper.m_Inventory_PropActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Inventory_PropActionsCallbackInterfaces.Add(instance);
                @Use.started += instance.OnUse;
                @Use.performed += instance.OnUse;
                @Use.canceled += instance.OnUse;
            }

            private void UnregisterCallbacks(IInventory_PropActions instance)
            {
                @Use.started -= instance.OnUse;
                @Use.performed -= instance.OnUse;
                @Use.canceled -= instance.OnUse;
            }

            public void RemoveCallbacks(IInventory_PropActions instance)
            {
                if (m_Wrapper.m_Inventory_PropActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventory_PropActions instance)
            {
                foreach (var item in m_Wrapper.m_Inventory_PropActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Inventory_PropActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Inventory_PropActions @Inventory_Prop => new Inventory_PropActions(this);

        // Inventory_Note
        private readonly InputActionMap m_Inventory_Note;
        private List<IInventory_NoteActions> m_Inventory_NoteActionsCallbackInterfaces = new List<IInventory_NoteActions>();
        private readonly InputAction m_Inventory_Note_view;
        public struct Inventory_NoteActions
        {
            private @PlayerControls m_Wrapper;
            public Inventory_NoteActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @view => m_Wrapper.m_Inventory_Note_view;
            public InputActionMap Get() { return m_Wrapper.m_Inventory_Note; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Inventory_NoteActions set) { return set.Get(); }
            public void AddCallbacks(IInventory_NoteActions instance)
            {
                if (instance == null || m_Wrapper.m_Inventory_NoteActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_Inventory_NoteActionsCallbackInterfaces.Add(instance);
                @view.started += instance.OnView;
                @view.performed += instance.OnView;
                @view.canceled += instance.OnView;
            }

            private void UnregisterCallbacks(IInventory_NoteActions instance)
            {
                @view.started -= instance.OnView;
                @view.performed -= instance.OnView;
                @view.canceled -= instance.OnView;
            }

            public void RemoveCallbacks(IInventory_NoteActions instance)
            {
                if (m_Wrapper.m_Inventory_NoteActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IInventory_NoteActions instance)
            {
                foreach (var item in m_Wrapper.m_Inventory_NoteActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_Inventory_NoteActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public Inventory_NoteActions @Inventory_Note => new Inventory_NoteActions(this);
        public interface IPlayerActions
        {
            void OnTap(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnView(InputAction.CallbackContext context);
            void OnBlock(InputAction.CallbackContext context);
            void OnAimLock(InputAction.CallbackContext context);
        }
        public interface IMainUIActions
        {
            void OnOpenInventory(InputAction.CallbackContext context);
        }
        public interface IDialoguePanelActions
        {
            void OnShow(InputAction.CallbackContext context);
            void OnContinue(InputAction.CallbackContext context);
        }
        public interface IInventoryActions
        {
            void OnCloseInventory(InputAction.CallbackContext context);
        }
        public interface IInventory_WeaponActions
        {
            void OnEquipOrUnequip(InputAction.CallbackContext context);
        }
        public interface IInventory_PropActions
        {
            void OnUse(InputAction.CallbackContext context);
        }
        public interface IInventory_NoteActions
        {
            void OnView(InputAction.CallbackContext context);
        }
    }
}
