
# 这个配置文件保持SKill的资源, 这个资源应当是与Handler约定好的
# 这个配置文件有一系列表数组组成, 里面必须包含SkillKey, 以及与 Handler 或者 Builder 约定好的资源(特效,以及动画在这边定义)
# 对于约定好的字段, 制定好Key后其他的就可以不必定义了, 除非与约定不一致
# 名称决定使用蛇形命名法, SimpleSkills 就保持 简单的 Instantiate + Anim + Lua 的实现就好, 当然也可以提供 C# 实现, 常用的不常变的Skill 就用 
# 把 Lua 的腳本也放到這裏配置吧， 實話說，Lua腳本本身完全有能力處理這些 實例化和動畫，或許交由Lua腳本實現也是一種方案

# 技能的處理有兩種方式， 一是 使用 scripts 屬性，指定 Lua 腳本，這個腳本 是 SimpleSkillSubHandler 的一個實現 
# 另一種方式是使用 type 屬性指定 構建類型，大部份的子技能都應該使用這種方式
# 這樣其實不太好，因爲大部分的子處理器都是不相關的，沒辦法只憑藉 type 把它們聚合在一起
# 不如提供一些額外的配置，讓配置文件決定
# SimpleSkill 可以很有拓展性的， 首先是階段是可以拓展的
# 不可，這樣子是過度設計，我不需要這麼多東西
# 重申 SimpleSkill 中只提供基礎的東西
# 配置按處理器分開是合理的，按階段分開是不合理的，根據開放封閉原則
# Simple Skill 只有Casting 階段是檢測攻擊的
# 一個地圖塊 100x100 米就完全足夠了
################################
[[Skills]]
Key = {No="00001", Name="FireBall"}
Handlers = ['Mount', 'CollideAttack', 'Scriptable']
Attack={Atk=10.0, Matk=1.0}

Colliders=['W_Sword']

[[Skills.Mount.Casting.Prefabs]] # 定義爲階段下的預製體子表
Address = 'PF_Frame_001' # 預製體的索引
MountPoint = "W_Sword"
InWorldSpace= false
Stage="Casting"
DestroyDelay=1.0
# Offset={x=1.0,y=1.0,z=1.0}



# [[Skills]]
# Key = {No="00002", Name="Tap"}
# Handlers = ['ColliderAttack']



# [[Skills.Colliders]]
# Name = "Weapon" # 默认是在子物體中查找碰撞體，
# Target = "MagicBall" # 表示在生成的預製體中查找碰撞體，如果預製體就是碰撞體本身，不要Name， 先不考慮這個， 拼刀遊戲不需要
# 在Casting 階段過去後還要計算攻擊的技能不歸 SImpleSkill 管，這種時候 應該由額外的組件檢測傷害了





